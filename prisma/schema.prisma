// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
  CLIENT
  BARBER
  AGENCY
  ADMIN
}

enum MembershipTier {
  ESSENTIAL
  PREMIUM
  EXECUTIVE
}

enum MembershipStatus {
  ACTIVE
  PAUSED
  CANCELLED
  EXPIRED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

// User model
model User {
  id              String    @id @default(cuid())
  email           String    @unique
  name            String?
  phone           String?
  hashedPassword  String?
  role            UserRole
  emailVerified   DateTime?
  image           String?
  lastLogin       DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Role-specific profiles
  client          Client?
  barber          Barber?
  agency          Agency?
  
  // Auth relations
  accounts        Account[]
  sessions        Session[]
  
  @@index([email])
}

// NextAuth Account
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

// NextAuth Session
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

// Client profile
model Client {
  id                  String         @id @default(cuid())
  userId              String         @unique
  user                User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  preferredServices   String[]
  membershipTier      MembershipTier @default(ESSENTIAL)
  stripeCustomerId    String?        @unique
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  
  memberships         Membership[]
  bookings            Booking[]
  reviews             Review[]
  paymentMethods      PaymentMethod[]
}

// Barber profile
model Barber {
  id                String   @id @default(cuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  bio               String?
  specialties       String[]
  yearsOfExperience Int      @default(0)
  licenseNumber     String?
  portfolioUrl      String?
  instagramHandle   String?
  basePrice         Float    @default(44.99)
  isAvailable       Boolean  @default(false)
  isVerified        Boolean  @default(false)
  rating            Float    @default(0)
  totalCuts         Int      @default(0)
  areaId            String?
  area              Area?    @relation(fields: [areaId], references: [id])
  stripeAccountId   String?  @unique
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  memberships       Membership[]
  bookings          Booking[]
  reviews           Review[]
  availability      Availability[]
  portfolio         PortfolioImage[]
  
  @@index([areaId])
  @@index([isVerified])
}

// Agency profile
model Agency {
  id               String   @id @default(cuid())
  userId           String   @unique
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  companyName      String
  companyWebsite   String?
  companyAddress   String?
  contactRole      String?
  numberOfModels   Int      @default(0)
  isVerified       Boolean  @default(false)
  stripeCustomerId String?  @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  models           AgencyModel[]
  bookings         Booking[]
  
  @@index([isVerified])
}

// Geographic areas
model Area {
  id          String   @id @default(cuid())
  name        String
  city        String
  boundaries  Json?    // GeoJSON format
  maxBarbers  Int      @default(3)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  barbers     Barber[]
  
  @@unique([name, city])
  @@index([city])
}

// Membership subscriptions
model Membership {
  id                   String           @id @default(cuid())
  clientId             String
  client               Client           @relation(fields: [clientId], references: [id], onDelete: Cascade)
  barberId             String
  barber               Barber           @relation(fields: [barberId], references: [id])
  status               MembershipStatus @default(ACTIVE)
  price                Float
  startDate            DateTime         @default(now())
  lockedUntil          DateTime?        // 2-month lock period
  gracePeriodEnd       DateTime?        // 48-hour grace period
  cancelledAt          DateTime?
  stripeSubscriptionId String?          @unique
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  
  bookings             Booking[]
  payments             Payment[]
  
  @@index([clientId])
  @@index([barberId])
  @@index([status])
}

// Bookings
model Booking {
  id                 String        @id @default(cuid())
  membershipId       String?
  membership         Membership?   @relation(fields: [membershipId], references: [id])
  clientId           String?
  client             Client?       @relation(fields: [clientId], references: [id])
  barberId           String
  barber             Barber        @relation(fields: [barberId], references: [id])
  agencyId           String?
  agency             Agency?       @relation(fields: [agencyId], references: [id])
  scheduledAt        DateTime
  duration           Int           @default(45) // minutes
  status             BookingStatus @default(PENDING)
  notes              String?
  completedAt        DateTime?
  cancelledAt        DateTime?
  cancellationReason String?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  
  payment            Payment?
  review             Review?
  
  @@index([clientId])
  @@index([barberId])
  @@index([agencyId])
  @@index([scheduledAt])
  @@index([status])
}

// Barber availability
model Availability {
  id         String   @id @default(cuid())
  barberId   String
  barber     Barber   @relation(fields: [barberId], references: [id], onDelete: Cascade)
  dayOfWeek  Int      // 0-6 (Sunday-Saturday)
  startTime  String   // HH:MM format
  endTime    String   // HH:MM format
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  @@unique([barberId, dayOfWeek, startTime])
  @@index([barberId])
}

// Portfolio images
model PortfolioImage {
  id         String   @id @default(cuid())
  barberId   String
  barber     Barber   @relation(fields: [barberId], references: [id], onDelete: Cascade)
  imageUrl   String
  caption    String?
  order      Int      @default(0)
  createdAt  DateTime @default(now())
  
  @@index([barberId])
}

// Reviews
model Review {
  id         String   @id @default(cuid())
  bookingId  String   @unique
  booking    Booking  @relation(fields: [bookingId], references: [id])
  clientId   String
  client     Client   @relation(fields: [clientId], references: [id])
  barberId   String
  barber     Barber   @relation(fields: [barberId], references: [id])
  rating     Int      // 1-5
  comment    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  @@index([clientId])
  @@index([barberId])
}

// Payment methods
model PaymentMethod {
  id                    String   @id @default(cuid())
  clientId              String
  client                Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  stripePaymentMethodId String   @unique
  type                  String   // card, bacs_debit, etc.
  last4                 String?
  isDefault             Boolean  @default(false)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  @@index([clientId])
}

// Payments
model Payment {
  id                    String        @id @default(cuid())
  membershipId          String?
  membership            Membership?   @relation(fields: [membershipId], references: [id])
  bookingId             String?       @unique
  booking               Booking?      @relation(fields: [bookingId], references: [id])
  amount                Float
  platformFee           Float
  barberAmount          Float
  status                PaymentStatus @default(PENDING)
  stripePaymentIntentId String?       @unique
  stripeInvoiceId       String?       @unique
  paidAt                DateTime?
  failedAt              DateTime?
  refundedAt            DateTime?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  
  @@index([membershipId])
  @@index([status])
}

// Agency models
model AgencyModel {
  id         String   @id @default(cuid())
  agencyId   String
  agency     Agency   @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  firstName  String
  lastName   String
  email      String   @unique
  phone      String?
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  @@index([agencyId])
}